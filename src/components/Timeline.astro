---
const covers: Record<string, string>[] = await Astro.glob(
	"../../public/img/timeline/*.jpg"
);
---

<section>
	<div class="selector">
		{
			covers.map((cover, i: number) => {
				if (i === 0) {
					return (
						<button
							aria-label="select-period"
							class="btn-selector selected"
							style={`background-image: url(${cover.default});`}
						/>
					);
				} else {
					return (
						<button
							aria-label="select-period"
							class="btn-selector"
							style={`background-image: url(${cover.default});`}
						/>
					);
				}
			})
		}
		<div class="line">
			<ul>
				<li>1800</li>
				<li>1800</li>
				<li>1800</li>
				<li>1800</li>
				<li>1800</li>
			</ul>
		</div>
	</div>
	<div class="information">
		<h3>Title</h3>
		<p>My Name is Vincent</p>
	</div>
</section>

<script>
	import TimelineContent from "../classes/TimelineContent";

	const buttons: NodeListOf<HTMLButtonElement> =
		document.querySelectorAll(".btn-selector");
	const informationHeader: Element | null =
		document.querySelector(".information h3");
	const informationParagraph: Element | null =
		document.querySelector(".information p");

	const timelines = [
		new TimelineContent("1887 - 1890", "Lorem ipsum hambizo"),
		new TimelineContent("1911 - 1914", "Lorem ipsum hambizo"),
		new TimelineContent("1914 - 1920", "Lorem ipsum hambizo"),
	];

	const createContent = function (index: number) {
		informationHeader &&
			(informationHeader.textContent = timelines[index]?.title);
		informationParagraph &&
			(informationParagraph.textContent = timelines[index]?.body);
	};

	// Init content with first one
	createContent(0);

	buttons.forEach((button: HTMLButtonElement, i: number) => {
		// More accessibility baybay
		button.title = `Period between ${timelines[i]?.title}`;

		button.addEventListener("click", () => {
			buttons.forEach((other) => other.classList.remove("selected"));
			button.classList.add("selected");

			createContent(i);
		});
	});
</script>

<style lang="scss">
	@use "@styles/variables" as media;

	section {
		padding-bottom: var(--block-padded);
		display: grid;
		grid-template-columns: 20% auto;
		.selector {
			.line {
				border-left: 0.2rem solid var(--color-complementary);
				height: inherit;
				position: absolute;
				ul {
					position: absolute;
					padding-block: 7rem;
					height: 100%;
					display: flex;
					flex-direction: column;
					justify-content: space-between;
					li {
						transform: rotateZ(-90deg);
						list-style-type: none;
						font-size: 0.85rem;
					}
				}
			}
			width: 100%;
			height: 75vh;
			display: flex;
			flex-direction: column;
			align-items: center;
			justify-content: space-between;
		}

		.btn-selector {
			z-index: 1;
			width: 3rem;
			height: 3rem;
			border-radius: 50%;
			border: none;
			background: url("") no-repeat center center / cover;
			border: 0.1rem solid var(--color-dominant);
			animation: scaleDownMobile 1s ease 1 forwards;
			@media only screen and (min-width: media.$media-phone) {
				animation-name: scaleDownDesktop;
			}
			animation-fill-mode: forwards;
		}

		.selected {
			animation: scaleUpMobile 1s ease 1 forwards;
			@media only screen and (min-width: media.$media-phone) {
				animation-name: scaleUpDesktop;
			}
		}

		@media only screen and (min-width: media.$media-phone) {
			grid-template-columns: auto;
			grid-auto-rows: auto auto;
			.selector {
				.line {
					border-top: 0.2rem solid var(--color-complementary);
					height: max-content;
					width: 100%;
					ul {
						padding-block: 0;
						flex-direction: row;
						justify-content: space-around;
						width: 100%;
						li {
							transform: initial;
						}
					}
				}
				height: 20vh;
				flex-direction: row;
				justify-content: space-evenly;
			}
		}

		.information {
			margin-inline: var(--narrow-inline);
		}
	}

	@-webkit-keyframes scaleUpDesktop {
		from {
			transform: scale(1);
		}
		to {
			transform: scale(3.5);
		}
	}

	@-webkit-keyframes scaleDownDesktop {
		from {
			transform: scale(3.5);
		}
		to {
			transform: scale(1);
		}
	}

	@-webkit-keyframes scaleUpMobile {
		from {
			transform: scale(1);
		}
		to {
			transform: scale(1.25);
		}
	}

	@-webkit-keyframes scaleDownMobile {
		from {
			transform: scale(1.25);
		}
		to {
			transform: scale(1);
		}
	}
</style>
